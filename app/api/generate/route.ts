import { NextResponse } from 'next/server'
import fs from 'fs'; import path from 'path'
import { fetchPaidUnfulfilled } from '@/lib/shopify'
import { fillAndreaniFromOrders } from '@/lib/andreani'

export const runtime='nodejs'; export const dynamic='force-dynamic'
const clean=(d:string)=>d.replace(/^https?:\/\//i,'').replace(/\/+$/,'').trim()
function load(){ const FILE=path.join(process.cwd(),'data','config.json'); if(fs.existsSync(FILE)) return JSON.parse(fs.readFileSync(FILE,'utf8')); return { shopifyDomain: clean(process.env.SHOPIFY_DOMAIN||''), shopifyToken: process.env.SHOPIFY_TOKEN||'', defaults:{ dni: process.env.DEFAULT_DNI||'11111111', peso_gr:Number(process.env.DEFAULT_PESO_GR||1000), alto_cm:Number(process.env.DEFAULT_ALTO_CM||1), ancho_cm:Number(process.env.DEFAULT_ANCHO_CM||1), profundidad_cm:Number(process.env.DEFAULT_PROFUNDIDAD_CM||1), valor_declarado:Number(process.env.DEFAULT_VALOR_DECLARADO||6000) } }
export async function POST(){ try{ const cfg=load(); if(!cfg.shopifyDomain||!cfg.shopifyToken) return new NextResponse('Faltan credenciales Shopify',{status:400}); const orders=await fetchPaidUnfulfilled({domain:cfg.shopifyDomain,token:cfg.shopifyToken}); if(!orders.length) return new NextResponse('No hay pedidos pagados y no cumplidos para exportar.',{status:400}); const tpl=path.join(process.cwd(),'public','andreani.xlsx'); if(!fs.existsSync(tpl)) return new NextResponse('Falta la plantilla: /public/andreani.xlsx',{status:400}); const buf=fs.readFileSync(tpl); const out=await fillAndreaniFromOrders(Buffer.from(buf), orders, cfg.defaults); const d=new Date(); const dd=String(d.getDate()).padStart(2,'0'), mm=String(d.getMonth()+1).padStart(2,'0'), yyyy=d.getFullYear(); return new NextResponse(out,{ headers:{ 'Content-Type':'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'Content-Disposition':`attachment; filename="andreani_envios_${dd}-${mm}-${yyyy}.xlsx"` } }) } catch(e:any){ return new NextResponse(e.message||'Error al generar',{status:500}) } }
